<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="http://maven.apache.org/POM/4.0.0"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">


  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.kie.kogito</groupId>
    <artifactId>kogito-build-no-bom-parent</artifactId>
    <version>999-SNAPSHOT</version>
  </parent>

  <groupId>com.ibm.bamoe</groupId>
  <artifactId>bamoe-examples-parent</artifactId>
  <packaging>pom</packaging>

  <name>BAMOE Examples</name>
  <description>Example applications showcasing IBM Business Automation Manager Open Editions (BAMOE) capabilities.</description>

  <url>https://www.ibm.com/products/business-automation-manager-open-editions</url>
  <inceptionYear>2023</inceptionYear>

  <licenses>
    <license>
      <name>Apache Software License, Version 2.0</name>
      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
      <distribution>repo</distribution>
    </license>
  </licenses>

  <scm>
    <connection>scm:git:https://github.com/ibm/bamoe</connection>
    <developerConnection>scm:git:https://github.com/ibm/bamoe</developerConnection>
    <url>https://github.com/ibm/bamoe</url>
  </scm>

  <repositories>
    <repository>
      <!-- Resolves parent pom when it is a SNAPSHOT -->
      <id>apache.snapshots</id>
      <name>Apache Snapshot Repository</name>
      <url>https://repository.apache.org/snapshots</url>
      <releases>
        <enabled>false</enabled>
      </releases>
    </repository>
  </repositories>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

    <!-- Dependencies version -->
    <version.org.kie.kogito>999-SNAPSHOT</version.org.kie.kogito>
    <version.org.skyscreamer>1.5.0</version.org.skyscreamer>
    <version.org.eclipse.jkube>1.4.0</version.org.eclipse.jkube>
    <version.org.webjars>4.5.3</version.org.webjars>
    <version.jib.plugin>3.3.1</version.jib.plugin>
    <version.maven.resources.plugin>2.5</version.maven.resources.plugin>

    <!-- Reproducible builds -->
    <project.build.outputTimestamp>2024-01-16T00:00:00Z</project.build.outputTimestamp>
    <version.maven.artifact.plugin>3.4.1</version.maven.artifact.plugin>

    <!-- Tests config -->
    <surefire.forkCount>1</surefire.forkCount>
    <failsafe.include>**/*IT.java</failsafe.include>
    <failsafe.exclude>**/Native*IT.java</failsafe.exclude>
    <tests.category></tests.category>
    <tests.quarkus.http.port>0</tests.quarkus.http.port>     <!-- Port 0 means dynamic port -->

    <!-- Misc. -->
    <alphanetworkCompilerEnabled>false</alphanetworkCompilerEnabled>
    <java.module.name>com.ibm.bamoe.example</java.module.name>
    <quarkus.package.jar.type>fast-jar</quarkus.package.jar.type>    <!-- Override default to fast-jar packaging for forward-compatibility -->
  </properties>

  <modules>
    <module>decisiontable-quarkus-example</module>
    <module>decisiontable-springboot-example</module>
    <module>dmn-15-quarkus-example</module>
    <module>dmn-15-springboot-example</module>
    <module>dmn-drools-quarkus-metrics</module>
    <module>dmn-drools-springboot-metrics</module>
    <module>dmn-event-driven-quarkus</module>
    <module>dmn-event-driven-springboot</module>
    <module>dmn-knative-quickstart-quarkus</module>
    <module>dmn-listener-dtable</module>
    <module>dmn-listener-quarkus</module>
    <module>dmn-listener-springboot</module>
    <module>dmn-multiple-models-quarkus-example</module>
    <module>dmn-quarkus-example</module>
    <module>dmn-resource-jar-quarkus-example</module>
    <module>dmn-resource-jar-springboot-example</module>
    <module>dmn-springboot-example</module>
    <module>process-accelerator</module>
    <module>process-business-calendar</module>
    <module>process-business-rules-quarkus</module>
    <module>process-compact-architecture</module>
    <module>process-decisions-quarkus</module>
    <module>process-decisions-rest-quarkus</module>
    <module>process-decisions-rules-quarkus</module>
    <module>process-error-handling</module>
    <module>process-event-driven</module>
    <module>process-monitoring-quarkus</module>
    <module>process-persistence</module>
    <module>process-postgresql-persistence-quarkus</module>
    <module>process-rest-service-call-quarkus</module>
    <module>process-rest-workitem-multi-quarkus</module>
    <module>process-rest-workitem-quarkus</module>
    <module>process-saga-quarkus</module>
    <module>process-scripts-quarkus</module>
    <module>process-security</module>
    <module>process-service-calls-quarkus</module>
    <module>process-user-tasks-subsystem</module>
    <module>rules-legacy-quarkus-example</module>
    <module>rules-legacy-scesim-quarkus-example</module>
    <module>rules-legacy-scesim-springboot-example</module>
    <module>rules-legacy-springboot-example</module>
    <module>rules-quarkus-helloworld</module>
    <module>ruleunit-event-driven-quarkus</module>
    <module>ruleunit-event-driven-springboot</module>
    <module>ruleunit-quarkus-example</module>
    <module>ruleunit-springboot-example</module>
    <!-- <module>standalone-editors-example</module> Not a Maven module. -->
  </modules>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.webjars</groupId>
        <artifactId>bootstrap</artifactId>
        <version>${version.org.webjars}</version>
        <scope>runtime</scope>
      </dependency>
      <dependency>
        <groupId>org.skyscreamer</groupId>
        <artifactId>jsonassert</artifactId>
        <version>${version.org.skyscreamer}</version>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>org.kie.kogito</groupId>
        <artifactId>kogito-test-utils</artifactId>
        <version>${version.org.kie.kogito}</version>
      </dependency>
      <dependency>
        <groupId>org.infinispan</groupId>
        <artifactId>infinispan-spring-boot3-starter-remote</artifactId>
        <version>${version.org.infinispan}</version>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <build>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-resources-plugin</artifactId>
          <version>${version.maven.resources.plugin}</version>
          <executions>
            <execution>
              <id>add-it-resources</id>
              <phase>pre-integration-test</phase>
              <goals>
                <goal>copy-resources</goal>
              </goals>
              <configuration>
                <outputDirectory>${project.build.directory}/test-run/META-INF</outputDirectory>
                <resources>
                  <resource>
                    <directory>target/classes/META-INF</directory>
                  </resource>
                </resources>
              </configuration>
            </execution>
          </executions>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-failsafe-plugin</artifactId>
          <version>${version.surefire.plugin}</version>
          <configuration>
            <forkCount>${surefire.forkCount}</forkCount>
            <reuseForks>true</reuseForks>
            <includes>
              <include>${failsafe.include}</include>
            </includes>
            <excludes>
              <exclude>${failsafe.exclude}</exclude>
            </excludes>
            <systemPropertyVariables>
              <tests.category>${tests.category}</tests.category>
              <enable.resource.infinispan>${enable.resource.infinispan}</enable.resource.infinispan>
              <enable.resource.kafka>${enable.resource.kafka}</enable.resource.kafka>
              <enable.resource.postgresql>${enable.resource.postgresql}</enable.resource.postgresql>
              <enable.resource.mongodb>${enable.resource.mongodb}</enable.resource.mongodb>
              <container.image.keycloak>${container.image.keycloak}</container.image.keycloak>
              <container.image.infinispan>${container.image.infinispan}</container.image.infinispan>
              <container.image.kafka>${container.image.kafka}</container.image.kafka>
              <native.image.path>${project.build.directory}/${project.build.finalName}-runner</native.image.path>
            </systemPropertyVariables>
            <classesDirectory>${project.build.outputDirectory}</classesDirectory>
            <workingDirectory>${project.build.directory}/test-run</workingDirectory>
          </configuration>
          <executions>
            <execution>
              <goals>
                <goal>integration-test</goal>
                <goal>verify</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-enforcer-plugin</artifactId>
          <version>${version.enforcer.plugin}</version>
          <executions>
            <execution>
              <id>enforce-versions</id>
              <goals>
                <goal>enforce</goal>
              </goals>
              <configuration>
                <rules>
                  <requireMavenVersion>
                    <version>${version.maven}</version>
                  </requireMavenVersion>
                  <requireJavaVersion>
                    <version>${maven.compiler.release}</version>
                  </requireJavaVersion>
                </rules>
              </configuration>
            </execution>
          </executions>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>${version.compiler.plugin}</version>
          <configuration>
            <release>${maven.compiler.release}</release>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>${version.surefire.plugin}</version>
          <configuration>
            <forkCount>${surefire.forkCount}</forkCount>
            <reuseForks>true</reuseForks>
            <runOrder>hourly</runOrder>
            <systemPropertyVariables>
              <tests.category>${tests.category}</tests.category>
            </systemPropertyVariables>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-jar-plugin</artifactId>
          <version>${version.jar.plugin}</version>
          <executions>
            <execution>
              <id>default-jar</id>
              <configuration>
                <archive>
                  <manifestEntries combine.children="append">
                    <Automatic-Module-Name>${java.module.name}</Automatic-Module-Name>
                  </manifestEntries>
                </archive>
              </configuration>
            </execution>
            <!-- No OSGi manifestEntries for <goal>jar</goal>: if it supported, then
                        felix has already added them -->
            <execution>
              <id>test-jar</id>
              <goals>
                <goal>test-jar</goal>
              </goals>
              <configuration>
                <skipIfEmpty>true</skipIfEmpty>
                <excludes>
                  <exclude>**/logback-test.xml</exclude>
                  <exclude>**/jndi.properties</exclude>
                </excludes>
                <archive>
                  <manifestEntries>
                    <Bundle-SymbolicName>${java.module.name}.tests</Bundle-SymbolicName>
                    <Bundle-Version>
                      ${parsedVersion.majorVersion}.${parsedVersion.minorVersion}.${parsedVersion.incrementalVersion}.${osgi.snapshot.qualifier}</Bundle-Version>
                    <Bundle-Name>${project.name}</Bundle-Name>
                    <Bundle-Vendor>${project.organization.name}</Bundle-Vendor>
                  </manifestEntries>
                </archive>
              </configuration>
            </execution>
          </executions>
          <configuration>
            <archive>
              <manifest>
                <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
              </manifest>
            </archive>
          </configuration>
        </plugin>

        <!-- Image build / Kubernetes deployment -->
        <plugin>
          <groupId>org.eclipse.jkube</groupId>
          <artifactId>kubernetes-maven-plugin</artifactId>
          <version>${version.org.eclipse.jkube}</version>
        </plugin>
        <plugin>
          <groupId>org.eclipse.jkube</groupId>
          <artifactId>openshift-maven-plugin</artifactId>
          <version>${version.org.eclipse.jkube}</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-artifact-plugin</artifactId>
          <version>${version.maven.artifact.plugin}</version>
          <configuration>
            <outputTimestamp>${project.build.outputTimestamp}</outputTimestamp>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-maven-plugin</artifactId>
          <version>${version.org.springframework.boot}</version>
        </plugin>
        <plugin>
          <groupId>com.google.cloud.tools</groupId>
          <artifactId>jib-maven-plugin</artifactId>
          <version>${version.jib.plugin}</version>
          <configuration>
            <allowInsecureRegistries>true</allowInsecureRegistries>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>
      <!-- 
        Need Maven 3.8.6+, fail fast with actionable error rather than obscure
        errors like [ Error injecting: private org.eclipse.aether.spi.log.Logger
        org.apache.maven.repository.internal.DefaultVersionRangeResolver.logger ] -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
      </plugin>
      <plugin>
        <!-- Entry needed to create test-jars even for packaging types war, bundle, ... -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
      </plugin>
      <plugin>
        <!-- Entry needed to create, install and deploy sources jars -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <configuration>
          <systemPropertyVariables>
            <container.image.kafka>${container.image.kafka}</container.image.kafka>
          </systemPropertyVariables>
        </configuration>
      </plugin>
    </plugins>
  </build>

</project>