#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

###############
# Persistence #
###############

# Apache KIE provides a separate Flyway subsystem that allows Kogito's internal tables to be created and migrated
# without interfering with your application's Flyway, if you're using it.
#
# Note that the automatic schema generation using KIE Flyway is enabled to facilitate the setup of this example. For
# production environments, the usage of KIE Flyway is not recommended. The schema should be set up manually using the
# DDL scripts provided in the product's artifacts.
kie.flyway.enabled=true

# Tells the Kogito runtime what kind of persistence is configured.
kogito.persistence.type=jdbc


###############
# Persistence #
###############

# Hibernate

# If hibernate is not auto generating the schema, and Quarkus is running in development mode then Quarkus will attempt
# to validate the database after startup and print a log message if there are any problems. This is not required as we
# use flyway
quarkus.hibernate-orm.validate-in-dev-mode=false
quarkus.hibernate-orm.database.generation=none

# H2
%h2.quarkus.datasource.db-kind=h2
%h2.quarkus.datasource.devservices.properties.NON_KEYWORDS=VALUE,KEY

# Postgres
%postgresql.quarkus.datasource.db-kind=postgresql

# Mssql
%mssql.quarkus.datasource.db-kind=mssql
%mssql.quarkus.hibernate-orm.mapping-files=META-INF/bamoe-data-index-orm.xml,META-INF/bamoe-job-service-orm.xml


############
# Security #
############

# Keeping it disabled for simplicity.

quarkus.oidc.enabled=false
kogito.auth.enabled=false


####################
# Containerization #
####################

# Profile to pack this example into a container image.
# To use it run a Maven build with the `container` profile (-Pcontainer)

%container,postgresql,mssql.quarkus.container-image.build=true
%container,postgresql,mssql.quarkus.container-image.push=false
%container,postgresql,mssql.quarkus.container-image.group=bamoe
%container,postgresql,mssql.quarkus.container-image.registry=dev.local
%container,postgresql,mssql.quarkus.container-image.tag=${project.version}
%postgresql.quarkus.container-image.name=process-persistence-postgresql
%mssql.quarkus.container-image.name=process-persistence-mssql


############
# Services #
############

# These properties are residual from Distributed Architecture, where Data-Index, Data-Audit,
# and Jobs Service are external to the Kogito Runtime application.
#
# They are still necessary, but won't be anymore in future releases.

kogito.service.url=http://0.0.0.0:8080
kogito.jobs-service.url=http://0.0.0.0:8080
kogito.data-index.url=http://0.0.0.0:8080


###############
# Development #
###############

# Swagger Dev UI configuration.
# More at https://quarkus.io/guides/openapi-swaggerui

quarkus.http.cors=true
quarkus.http.cors.origins=*
quarkus.dev-ui.cors.enabled=false
quarkus.smallrye-openapi.path=/docs/openapi.json
quarkus.http.test-port=0
quarkus.swagger-ui.always-include=true
quarkus.kogito.data-index.graphql.ui.always-include=true
