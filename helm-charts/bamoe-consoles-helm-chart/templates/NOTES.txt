{{- if not .Values.global.ingressSource }}

{{- if index .Values "runtime-tools-consoles-helm-chart" "management-console" "ingress" "enabled" }}

1. Management Console available at:
{{- range $host := index .Values "runtime-tools-consoles-helm-chart" "management-console" "ingress" "hosts" }}
  {{- range .paths }}
  http{{ if index $.Values "runtime-tools-consoles-helm-chart" "management-console" "ingress" "tls" }}s{{ end }}://{{ tpl $host.host $ }}{{ .path }}
  {{- end }}
{{- end }}
{{- else }}

1. Run the following commands in a separate terminal to port-forward Management Console application:
{{- if contains "NodePort" ( index .Values "runtime-tools-consoles-helm-chart" "management-console" "service" "type" ) }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "management-console.fullname" ( index .Subcharts "management-console" ) }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" ( index .Values "runtime-tools-consoles-helm-chart" "management-console" "service" "type" ) }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "management-console.fullname" ( index .Subcharts "management-console" ) }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "management-console.fullname" ( index .Subcharts "management-console" ) }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ index .Values "runtime-tools-consoles-helm-chart" "management-console" "service" "port" }}
{{- else if contains "ClusterIP" ( index .Values "runtime-tools-consoles-helm-chart" "management-console" "service" "type" ) }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/component={{ index .Values "runtime-tools-consoles-helm-chart" "management-console" "name" }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Management Console URL: http://127.0.0.1:8081"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8081:$CONTAINER_PORT
{{- end }}
{{- end }}

{{- if index .Values "runtime-tools-consoles-helm-chart" "task-console" "ingress" "enabled" }}

2. Task Console available at:
{{- range $host := index .Values "runtime-tools-consoles-helm-chart" "task-console" "ingress" "hosts" }}
  {{- range .paths }}
  http{{ if index $.Values "runtime-tools-consoles-helm-chart" "task-console" "ingress" "tls" }}s{{ end }}://{{ tpl $host.host $ }}{{ .path }}
  {{- end }}
{{- end }}
{{- else }}

2. Run the following commands in a separate terminal to port-forward Task Console application:
{{- if contains "NodePort" ( index .Values "runtime-tools-consoles-helm-chart" "task-console" "service" "type") }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "task-console.fullname" ( index .Subcharts "task-console" ) }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" (index .Values "runtime-tools-consoles-helm-chart" "task-console" "service" "type") }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "task-console.fullname" ( index .Subcharts "task-console" ) }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "task-console.fullname" ( index .Subcharts "task-console" ) }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ index .Values "runtime-tools-consoles-helm-chart" "task-console" "service" "port" }}
{{- else if contains "ClusterIP" ( index .Values "runtime-tools-consoles-helm-chart" "task-console" "service" "type" ) }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/component={{ index .Values "runtime-tools-consoles-helm-chart" "task-console" "name" }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Task Console URL: http://127.0.0.1:21345"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 21345:$CONTAINER_PORT
{{- end }}
{{- end }}

{{- else if eq .Values.global.ingressSource "minikube" }}

Run the following commands:
  export MINIKUBE_IP=$(minikube ip)
  echo "\n# Minikube BAMOE Consoles Helm Chart hostnames" | sudo tee -a /etc/hosts
{{- range $host := index .Values "runtime-tools-consoles-helm-chart" "management-console" "ingress" "hosts" }}
  {{- range .paths }}
  echo "$MINIKUBE_IP {{ tpl $host.host $ }}" | sudo tee -a /etc/hosts
  {{- end }}
{{- end }}
{{- range $host := index .Values "runtime-tools-consoles-helm-chart" "task-console" "ingress" "hosts" }}
  {{- range .paths }}
  echo "$MINIKUBE_IP {{ tpl $host.host $ }}" | sudo tee -a /etc/hosts
  {{- end }}
{{- end }}

{{- else if eq .Values.global.ingressSource "openshift" }}

1. Management Console available at:
{{- $host := index .Values "runtime-tools-consoles-helm-chart" "management-console" "openshiftRoute" "host" }}
  http{{ if index $.Values "runtime-tools-consoles-helm-chart" "management-console" "openshiftRoute" "tls"  }}s{{ end }}://{{ tpl $host $}}
2. Task Console available at:
{{- $host := index .Values "runtime-tools-consoles-helm-chart" "task-console" "openshiftRoute" "host" }}
  http{{ if index $.Values "runtime-tools-consoles-helm-chart" "task-console" "openshiftRoute" "tls" }}s{{ end }}://{{ tpl $host $}}

{{- else }}
{{- if index .Values "runtime-tools-consoles-helm-chart" "management-console" "ingress" "enabled" }}
1. Management Console available at:
{{- range $host := index .Values "runtime-tools-consoles-helm-chart" "management-console" "ingress" "hosts" }}
  {{- range .paths }}
  http{{ if index $.Values "runtime-tools-consoles-helm-chart" "management-console" "ingress" "tls" }}s{{ end }}://{{ tpl $host.host $ }}{{ .path }}
  {{- end }}
{{- end }}
{{- end }}
{{- if index .Values "runtime-tools-consoles-helm-chart" "task-console" "ingress" "enabled" }}
2. Task Console available at:
{{- range $host := index .Values "runtime-tools-consoles-helm-chart" "task-console" "ingress" "hosts" }}
  {{- range .paths }}
  http{{ if index $.Values "runtime-tools-consoles-helm-chart" "task-console" "ingress" "tls" }}s{{ end }}://{{ tpl $host.host $ }}{{ .path }}
  {{- end }}
{{- end }}
{{- end }}

{{- end }}
